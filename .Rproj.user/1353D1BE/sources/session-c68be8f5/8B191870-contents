---
title: "5. Importing libraries"
author: "Dr. Bartosiak"
format: 
  live-html:
    toc: true
    toc-depth: 2
    link-external-icon: true
    link-external-newwindow: true
pyodide:
  packages:
    - seaborn
editor_options: 
  chunk_output_type: console
---

# Importing Libraries in Python  

In Python, **libraries** (also called modules or packages) contain pre-written code that you can use to simplify your work. Instead of writing everything from scratch, you can **import** libraries to access functions, classes, and tools for various tasks such as data analysis, web development, and machine learning.  

---

## 1. Importing a Library
To use a library in Python, you need to **import** it using the `import` keyword.  


**Example: Importing the math Library**
```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true

import math  

# Use a function from the math library  
result = math.sqrt(25)  
print(result)  # Output: 5.0

```

Here, we import the `math` library and use `math.sqrt()` to calculate the square root of 25.

:::{collout-note}
Notice how we call functions from the imported libraries. We first type the library name (`math`) followed by a `.` and the function name (`sqrt()`)
:::

## 2. Importing with an Alias

You can rename a library using the `as` keyword to shorten the name for convenience.

**Example: Importing NumPy with an Alias**
```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true

import numpy as np  

array = np.array([1, 2, 3, 4])  
print(array)
```

Here, `numpy` is imported as `np`, making it easier to call its functions.

**Exercise**
*Import `pandas` library. Use an Alias so that you can run the code below.* 
```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true

#import your library here 

df = pd.DataFrame({'Name': ['Alice', 'Bob'], 'Age': [25, 30]})  
print(df)
```


## 3. Importing Specific Functions

Instead of importing the entire library, you can import only the functions you need using from.

**Example: Importing Specific Functions**

```{pyodide}
#| autorun: false
#| startover: false
#| min-lines: 3
#| completion: true
from math import sqrt, pi  

print(sqrt(16))  # Output: 4.0  
print(pi)        # Output: 3.141592653589793
```

## 4. Installing and Importing External Libraries

Some libraries are built-in, but others need to be installed first using `pip`. As you know, we are using a simplified version of Python on this website, so you won't be able to run the code below.

**Example: Installing Pandas**

```{default}
pip install pandas
```

If you are using colab to run your code, you need to add `!` to your `pip` statement. 
`pip` is a shell (terminal) command - an instruction that you type into a command-line interface (CLI) or terminal to interact with the operating system.. 

Google Colab is based on Jupyter notebooks an interactive version of Python, where commands executed with `!` are interpreted as shell (terminal) commands instead of Python code.

```{default}
!pip install mysql.connector
```

## 5. Commonly Used Libraries in Python

| Library         | Purpose |
|----------------|---------|
| [`math`](https://docs.python.org/3/library/math.html) | Provides mathematical functions like square root, trigonometry, logarithms, and constants (e.g., `pi`). |
| [`random`](https://docs.python.org/3/library/random.html) | Generates random numbers, shuffles lists, and selects random elements, useful for simulations and games. |
| [`datetime`](https://docs.python.org/3/library/datetime.html) | Allows working with dates and times, including formatting, comparisons, and time zone handling. |
| [`numpy`](https://numpy.org/doc/stable/) | Supports numerical computing with powerful array structures and mathematical functions, essential for data science. |
| [`pandas`](https://pandas.pydata.org/docs/) | Provides data structures like DataFrames for analyzing, cleaning, and manipulating structured data efficiently. |
| [`matplotlib`](https://matplotlib.org/stable/contents.html) | A plotting library used to create graphs, charts, and visualizations for data analysis and reporting. |
| [`requests`](https://docs.python-requests.org/en/latest/) | Enables sending HTTP requests to interact with web services and APIs, commonly used for fetching online data. |
| [`mysql.connector`](https://dev.mysql.com/doc/connector-python/en/) | A MySQL database driver that allows Python to connect, query, and manage MySQL databases efficiently. |

## **Key Takeaways**  

* Use `import library_name` to access built-in libraries.
* Use `import library_name as alias` to shorten library names.
* Use `from library_name import function_name` to import specific functions.
* Use `pip install library_name` to install external libraries before importing.

By mastering imports, you can leverage Pythonâ€™s vast ecosystem of libraries to write powerful and efficient code! ðŸš€


```{=html}
<style>
.disclaimer {
  font-size: 0.8em;
  color: #666;
  border-top: 1px solid #ddd;
  padding-top: 10px;
  margin-top: 20px;
}
</style>
```

```{=html}
<div>
  {{< include footer.html >}}
</div>
```