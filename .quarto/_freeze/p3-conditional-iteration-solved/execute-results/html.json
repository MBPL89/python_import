{
  "hash": "4473e557b42d104b82ee0ae54a6aef7d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"2. Beyond the Basic. Practice: Solution\"\n#draft: true\nauthor: \"Dr. Piccoli\"\nformat: live-html\npyodide:\n  packages:\n    - seaborn\neditor_options: \n  chunk_output_type: console\n---\n\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n\n\n\n\n\n## Conditional execution\n\n1)  Rewrite your pay computation to give the employee 1.5 times the hourly rate for hours worked above 40 hours.\n\n\n\n\n\n```{raw}\nEnter Hours: 45 \nEnter Rate: 10 \nPay: 475.0\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"45\\n10\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| autorun: false\n#| startover: true\n#| min-lines: 3\n#| completion: true\nhours = float(input('Enter Hours: '))\nrate = float(input('Enter Rate: '))\n\nif hours > 40 :\n    pay = (1.5 * hours - 20) * rate\nelse :\n    pay = hours * rate\nprint('Pay: ', pay)\n```\n\n\n\n\n\n2)  Rewrite your pay program using `try` and `except` so that your program handles non-numeric input gracefully by printing a message and exiting the program. The following shows two executions of the program:\n\n\n\n\n\n```{raw}\nEnter Hours: 20 \nEnter Rate: nine Error, please enter numeric input\n```\n\n```{raw}\nEnter Hours: forty Error, please enter numeric input\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"...\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| autorun: false\n#| startover: true\n#| min-lines: 3\n#| completion: true\n# Collect input data and produce error message if text is entered\ntry:\n    inp = input('Enter Hours: ')\n    hours = float(inp)\n    inp = input('Enter Rate: ')\n    rate = float(inp)\n    if hours > 40 :\n        pay = (1.5 * hours - 20) * rate\n    else :\n        pay = hours * rate\n    print('Pay: ', pay)\nexcept: \n    print(inp, ' Error, please enter numeric input')\n```\n\n\n\n\n\n3)  Write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:\n\n| Score   | Grade |\n|---------|-------|\n| \\>= 0.9 | A     |\n| \\>= 0.8 | B     |\n| \\>= 0.7 | C     |\n| \\>= 0.6 | D     |\n| \\< 0.6  | F     |\n\n\n\n\n\n```{raw}\nEnter score: 0.95 \nA\n```\n\n```{raw}\nEnter score: perfect Bad score\n```\n\n```{raw}\nEnter score: 10.0 Bad score\n```\n\n```{raw}\nEnter score: 0.75 \nC\n```\n\n```{raw}\nEnter score: 0.5 \nF\n```\n\n\n\n\n\nRun the program repeatedly as shown above to test the various different values for input.\n\n\n\n\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"...\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| autorun: false\n#| startover: true\n#| min-lines: 3\n#| completion: true\n\n# Note, this program does not enforce error catching\n# beacuse we are not asked to do it (we know the program is not robust)\n#\n# Collect input and convert to floating point number\ninp = input('Please enter score to convert: ')\nscore = float(inp)\n\n# Ensure it is within acceptable range of values that can be meaningfully converted\nif score >= 0 and score <= 1 :\n    if score >= 0.9 :\n        print('A')\n    elif score >= 0.8 :\n        print('B')\n    elif score >= 0.7 :\n        print('C')\n    elif score >= 0.6 :\n        print('D')\n    else :\n        print('F')\nelse :\n    print('Error, the score provided is out of acceptable range')\n```\n\n\n\n\n\n3)  Write a program which repeatedly reads numbers until the user enters \"done\". Once \"done\" is entered, print out the total, count, and average of the numbers. If the user enters anything other than a number, detect their mistake using try and except and print an error message and skip to the next number. If the user enters \"done\" without entering any number, print a proper message when giving the average.\n\n\n\n\n\n```{raw}\nEnter a number: 4 \nEnter a number: 5 \nEnter a number: bad data Invalid input \nEnter a number: 7 \nEnter a number: done \nTotal: 16 \nCount: 3 \n5.333333333333333\n```\n\n```{raw}\nEnter a number: done \nTotal: 0 \nCount: 0 \nCount is 0. Impossible to calculate the average\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"4\\n5\\n7\\ndone\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"done\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| autorun: false\n#| startover: true\n#| min-lines: 3\n#| completion: true\ncount = 0\nsum = 0\naverage = 'Count is 0. Impossible to calculate the average'\ninp = input('Please, enter a number. Type \"done\" to stop: ')\nwhile inp != 'done' :\n    try :\n        number = float(inp)\n        count = count + 1\n        sum = sum + number\n        average = sum / count\n    except :\n        print('Bad data')\n    inp = input('Please, enter a number. Type \"done\" to stop: ')\nprint('Total: ', sum)\nprint('Count: ', count)\nprint(average)\n```\n\n\n\n\n\n4)  Now improve your score conversion program (from exercise 3) by using appropriate error catching when the user does not input a number and by using a loop to continuously accept input until the user types 'done'\n\n\n\n\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"...\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| autorun: false\n#| startover: true\n#| min-lines: 3\n#| completion: true\n\n# Collect input and convert to floating point number\ninp = input('Please enter score to convert. Type \"done\" to stop: ')\n\nwhile inp != 'done' :\n    try :\n        score = float(inp)\n        # Ensure it is within acceptable range of values that can be meaningfully converted\n        if score >= 0 and score <= 1 :\n            if score >= 0.9 :\n                print('A')\n            elif score >= 0.8 :\n                print('B')\n            elif score >= 0.7 :\n                print('C')\n            elif score >= 0.6 :\n                print('D')\n            else :\n                print('F')\n        else :\n            print('Error, the score provided is out of acceptable range')\n    except :\n        print('Error, only numbers are allowed as input scores')\n    inp = input('Please enter score to convert. Type \"done\" to stop: ')\n```\n\n\n\n\n\n5)  Write another program that prompts the user for numbers until the user types \"done.\" At that point the program prints out both the maximum and minimum of the numbers (instead of the total, count, and average).\n\n\n\n\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"...\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| autorun: false\n#| startover: true\n#| min-lines: 3\n#| completion: true\n\n# Initiatilize all the variables we need\nthe_max = None\nthe_min = None\ncount = 0\n\n# Collect first input. If done, do not enter the loop\ninp = input('Please, enter a number. Type \"done\" to stop: ')\n\n# Repeate data collection until the user stops\nwhile inp != 'done' :\n\n    # Use try/except to catch non-numeric input\n    try :\n        number = float(inp)\n\n        # Use the count variable to see if it is the first iteration.\n        # In that case skip the comparisons and simply assign the value to max and min\n        if count > 0 :\n            if number > the_max :\n                the_max = number\n            if number < the_min :\n                the_min = number\n        else :\n            the_max = number\n            the_min = number\n        count = count + 1\n    except :\n        print('Bad data')\n    inp = input('Please, enter a number. Type \"done\" to stop: ')\n\n# Print results. These print statements will work with any result\nprint('The maximum number in the sequence provided is: ', the_max)\nprint('The minimum number in the sequence provided is: ', the_min)\nprint('Thanks for playing!')\n```\n\n```{=html}\n<div>\n<!-- Footer Section -->\n<div style=\"\n  width: 100vw;\n  height: auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #f9f9f9;\n  font-size: 12px;\n  border-top: 1px solid #ddd;\n  box-sizing: border-box;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 10px 20px;\n\">\n  <!-- Left-aligned -->\n  <div style=\"text-align: left; font-size: 16px;\">\n    Â© 2025. All Rights Reserved.\n  </div>\n  \n\n  <!-- Right-aligned -->\n  <div style=\"text-align: right; font-size: 16px;\">\n    Enabled by <a href=\"https://biagio-palese.netlify.app\" target=\"_blank\" style=\"text-decoration: none; color: #0073e6;\">Dr. Biagio Palese</a>\n  </div>\n</div>\n\n<!-- Mobile Responsiveness -->\n<style>\n  @media screen and (max-width: 768px) {\n    div[style*=\"width: 100vw\"] {\n      flex-direction: column;\n      height: auto;\n      padding: 10px 15px;\n    }\n    \n    div[style*=\"width: 100vw\"] > div {\n      text-align: center;\n      margin-bottom: 5px;\n    }\n  }\n</style>\n\n</div>\n```\n\n",
    "supporting": [
      "p3-conditional-iteration-solved_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}