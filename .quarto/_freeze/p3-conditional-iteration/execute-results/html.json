{
  "hash": "466aadc554b69a5f5767e05e643af7ca",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"2. Beyond the Basic. Practice: Conditional and Iterations\"\nauthor: \"Dr. Piccoli\"\nformat: live-html\npyodide:\n  packages:\n    - seaborn\neditor_options: \n  chunk_output_type: console\n---\n\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n\n\n\n\n\n## Conditional execution\n\n1)  Rewrite your pay computation to give the employee 1.5 times the hourly rate for hours worked above 40 hours.\n\n\n\n\n\n```{raw}\nEnter Hours: 45 \nEnter Rate: 10 \nPay: 475.0\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"45\\n10\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| persist: true\n#| autorun: false\n#| startover: true\n#| min-lines: 3\n#| completion: true\n\n\n```\n\n\n\n\n\n2)  Rewrite your pay program using `try` and `except` so that your program handles non-numeric input gracefully by printing a message and exiting the program. The following shows two executions of the program:\n\n\n\n\n\n```{raw}\nEnter Hours: 20 \nEnter Rate: nine Error, please enter numeric input\n```\n\n```{raw}\nEnter Hours: forty Error, please enter numeric input\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"...\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| persist: true\n#| autorun: false\n#| startover: true\n#| min-lines: 3\n#| completion: true\n\n\n```\n\n\n\n\n\n3)  Write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:\n\n| Score   | Grade |\n|---------|-------|\n| \\>= 0.9 | A     |\n| \\>= 0.8 | B     |\n| \\>= 0.7 | C     |\n| \\>= 0.6 | D     |\n| \\< 0.6  | F     |\n\n\n\n\n\n```{raw}\nEnter score: 0.95 \nA\n```\n\n```{raw}\nEnter score: perfect Bad score\n```\n\n```{raw}\nEnter score: 10.0 Bad score\n```\n\n```{raw}\nEnter score: 0.75 \nC\n```\n\n```{raw}\nEnter score: 0.5 \nF\n```\n\n\n\n\n\nRun the program repeatedly as shown above to test the various different values for input.\n\n\n\n\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"...\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| persist: true\n#| autorun: false\n#| startover: true\n#| min-lines: 3\n#| completion: true\n\n\n```\n\n\n\n\n\n3)  Write a program which repeatedly reads numbers until the user enters \"done\". Once \"done\" is entered, print out the total, count, and average of the numbers. If the user enters anything other than a number, detect their mistake using try and except and print an error message and skip to the next number. If the user enters \"done\" without entering any number, print a proper message when giving the average.\n\n\n\n\n\n```{raw}\nEnter a number: 4 \nEnter a number: 5 \nEnter a number: bad data Invalid input \nEnter a number: 7 \nEnter a number: done \nTotal: 16 \nCount: 3 \n5.333333333333333\n```\n\n```{raw}\nEnter a number: done \nTotal: 0 \nCount: 0 \nCount is 0. Impossible to calculate the average\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"4\\n5\\n7\\ndone\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"done\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| persist: true\n#| autorun: false\n#| startover: true\n#| min-lines: 3\n#| completion: true\n\n\n```\n\n\n\n\n\n4)  Now improve your score conversion program (from exercise 3) by using appropriate error catching when the user does not input a number and by using a loop to continuously accept input until the user types 'done'\n\n\n\n\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"...\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| persist: true\n#| autorun: false\n#| startover: true\n#| min-lines: 3\n#| completion: true\n\n\n```\n\n\n\n\n\n5)  Write another program that prompts the user for numbers until the user types \"done.\" At that point the program prints out both the maximum and minimum of the numbers (instead of the total, count, and average).\n\n\n\n\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"...\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| persist: true\n#| autorun: false\n#| startover: true\n#| min-lines: 3\n#| completion: true\n\n\n```\n\n```{=html}\n<div>\n<!-- Footer Section -->\n<div style=\"\n  width: 100vw;\n  height: auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #f9f9f9;\n  font-size: 12px;\n  border-top: 1px solid #ddd;\n  box-sizing: border-box;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 10px 20px;\n\">\n  <!-- Left-aligned -->\n  <div style=\"text-align: left; font-size: 16px;\">\n    Â© 2025. All Rights Reserved.\n  </div>\n  \n\n  <!-- Right-aligned -->\n  <div style=\"text-align: right; font-size: 16px;\">\n    Enabled by <a href=\"https://biagio-palese.netlify.app\" target=\"_blank\" style=\"text-decoration: none; color: #0073e6;\">Dr. Biagio Palese</a>\n  </div>\n</div>\n\n<!-- Mobile Responsiveness -->\n<style>\n  @media screen and (max-width: 768px) {\n    div[style*=\"width: 100vw\"] {\n      flex-direction: column;\n      height: auto;\n      padding: 10px 15px;\n    }\n    \n    div[style*=\"width: 100vw\"] > div {\n      text-align: center;\n      margin-bottom: 5px;\n    }\n  }\n</style>\n\n</div>\n```\n\n",
    "supporting": [
      "p3-conditional-iteration_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}